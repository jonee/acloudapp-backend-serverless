service: ACA-r-test # NOTE: update this with your service name

provider:
  name: aws
  runtime: rust
  # memorySize: 128
  stage: api # we attach the stage ie dev or prod in the path
  region: us-east-1

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package: # creates one artifact for each function
#  individually: true
  exclude:
    - ./**
  include:
    - ./target/release/test

plugins:
  - serverless-rust

functions:
#  hello:
    # handler value syntax is `{cargo-package-name}.{bin-name}`
    # or `{cargo-package-name}` for short when you are building a
    # default bin for a given package.
#    handler: hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

  test_test:
    handler: test
    events:
      - http:
          path: dev/test/test
          method: get
      - http:
          path: prod/test/test
          method: get

custom:
  # this section allows for customization of the default
  # serverless-rust plugin settings
  rust:
    # flags passed to cargo
#    cargoFlags: '--features enable-awesome'
    # experimental! when set to true, artifacts are built locally outside of docker
    dockerless: true
